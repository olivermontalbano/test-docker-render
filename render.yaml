
# Overview

# Render is used to manage the deployment of the application
# We have a staging and production environment
# The render.yaml file is the one source of truth for the services
# The render dashboard is the one source of truth for the environment variables


# Deployment

# Deploy changes to staging by pushing to the render-staging branch
# Deploy changes to production by pushing to the render-prod branch
# Only push code from main to render-staging and render-prod
# Deployment terminal command: git push origin main:render-staging


# Managing Services

# We are managing the services via infrastructure as code using the render.yaml file
# The render.yaml is the one source of truth for the services
# Do NOT make any changes to the services within the Render dashboard - this will cause conflicts
# Exception: Environment variables are managed in the Render dashboard
# Reference: https://render.com/docs/blueprint-spec


# Environment Variables

# All enviroment variables will be set in the Render dashboard
# This is done to prevent sensitive information from being stored in the render.yaml file
# It's also to keep one source of truth for the environment variables
# Do NOT add any environment variables to the render.yaml file
# https://docs.render.com/configure-environment-variables


# How to add or modify a service

# 1. Add the service to the render.yaml file
# 2. Push the changes to the render-staging & render-prod branches


---
services:
  # ------- Staging -------
  - name: staging-api
    type: web
    runtime: docker
    # rootDir: backend
    # buildCommand: cd backend && ./build.sh
    # startCommand: cd backend && python3 manage.py runserver 0.0.0.0:8000
    healthCheckPath: /health
    plan: standard
    branch: render-staging
    numInstances: 1
        
databases:
  # ------- Staging -------
  - name: staging
    databaseName: staging
    ipAllowList: # optional (defaults to allow all)
      - source: 0.0.0.0/0
        description: everywhere
